scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~field, ncol = 2) +
theme(legend.position="none") +
labs(y = "Abstract", x = NULL)
library(scales)
library(tidyr)
library(stringr)
library(dplyr)
library(ggplot2)
frequency <- bind_rows(mutate(tidy_abstract, field = "Abstract"),
mutate(tidy_title, field = "Title"))%>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(field, word) %>%
group_by(field) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(field, proportion) %>%
gather(field, proportion, `Title`:`Abstract`)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `field`, color = abs(`field` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~field, ncol = 2) +
theme(legend.position="none") +
labs(y = "Abstract", x = NULL)
tidy_ama <- bind_cols(tidy_abstract$word, tidy_title$word)
bind_rows(tidy_abstract,tidy_title)
tidy_ama <- full_join(tidy_abstract,tidy_title,by='wpt')
tidy_ama <- full_join(tidy_abstract,tidy_title,)
library(dplyr)
plot(tidy_abstract$word ~ tidy_title$word)
library(dplyr)
Plot(tidy_abstract$word ~ tidy_title$word)
?ggplot2.scatterplot()
?scatterplot
??scatterplot
tidy_ama <- merge(tidy_abstract,tidy_title, by = 0)
View(tidy_ama)
plot(lm(word.x,word.y,data = tidy_ama))
View(tidy_ama)
library(dplyr)
tidy_ama <- merge(tidy_abstract,tidy_title, by = 0)
plot(lm(word.x~word.y,data = tidy_ama))
library(dplyr)
tidy_ama <- merge(tidy_abstract,tidy_title, by = 0)
plot(word.x~word.y,data = tidy_ama)
ggplot(tidy_ama,aes(x=word.x,y=word.y))
cor(tidy_ama$word.x,tidy_ama$word.y)
sum(tidy_ama$word.x==tidy_ama$word.y)
sum(tidy_ama$word.x==tidy_ama$word.y)/count(tidy_ama$word.x)
sum(tidy_ama$word.x==tidy_ama$word.y)/nrow(tidy_ama$word.x)
sum(tidy_ama$word.x==tidy_ama$word.y)/(nrow(tidy_ama$word.x))
(sum(tidy_ama$word.x==tidy_ama$word.y))/(nrow(tidy_ama$word.x))
nrow(tidy_ama$word.x)
nrow(tidy_ama)
??intersect
View(tidy_abstract)
tidy_abstract[1,1]
library(dplyr)
#lets get some numerics
tidy_ab %in% tidy_title$word
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
#which don't?
diff <- setdiff(tidy_title$word,tidy_abstract$word)
diff %>%
count(word, sort = TRUE) %>%
filter(n > 1000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
?setdiff
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
overlap
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(overlap, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap$word <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(overlap, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap$word <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
View(overlap)
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
class(overlap)
count(overlap, sort = TRUE)
summary(tidy_title$word)
library(ggplot2)
#lets look at the frequency in each first
tidy_title %>%
count(word, sort = TRUE) %>%
filter(n > 1000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_abstract %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(word, sort = T) %>%
filter(n > 1000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
overlap
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
overlap %>%
count(overlap, sort = T) %>%
filter(n > 1000) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
ggplot(aes(overlap))
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
ama_overlap$overlap <- intersect(tidy_abstract$word,tidy_title$word)
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
ama_overlap <- data.frame()
ama_overlap$overlap <- intersect(tidy_abstract$word,tidy_title$word)
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
tidy_title <- overlap
ama_overlap %>%
count(overlap, sort = T) %>%
filter(n > 1000) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
ama_text <- read.csv('~/Desktop/stat2600/report2/AMA.csv')
head(ama_text)
summary(ama_text)
ama_clean <- ama_text[!(ama_text$Abstract==""),]
head(ama_clean)
summary(ama_clean)
library(tidytext)
tidy_title <- ama_clean %>%
unnest_tokens(word,Title)
tidy_abstract <- ama_clean %>%
unnest_tokens(word,Abstract)
summary(tidy_title)
summary(tidy_abstract)
View(tidy_abstract)
library(tidytext)
tidy_title <- ama_clean %>%
unnest_tokens(word,Abstract)
tidy_abstract <- ama_clean %>%
unnest_tokens(word,Title)
summary(tidy_title)
summary(tidy_abstract)
View(tidy_abstract)
tidy_title <- tidy_title%>%
anti_join(stop_words)
tidy_abstract <- tidy_abstract %>%
anti_join(stop_words)
summary(tidy_title)
summary(tidy_abstract)
library(ggplot2)
#lets look at the frequency in each first
tidy_title %>%
count(word, sort = TRUE) %>%
filter(n > 1000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_abstract %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(ggplot2)
#lets look at the frequency in each first
tidy_title %>%
count(word, sort = TRUE) %>%
filter(n > 10000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
tidy_abstract %>%
count(word, sort = TRUE) %>%
filter(n > 1000) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
tidy_abstract$overlap <- intersect(tidy_abstract$word,tidy_title$word)
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
ama_overlap <- data.frame(overlap)
ama_overlap %>%
count(overlap, sort = T) %>%
filter(n > 1000) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
ama_overlap <- data.frame(overlap)
ama_overlap %>%
count(overlap, sort = T) %>%
filter(n > 10000) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
ama_overlap <- data.frame(overlap)
ama_overlap %>%
count(overlap, sort = T) %>%
filter(n > 500) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
library(dplyr)
library(ggplot2)
#lets get some numerics
tidy_abstract$word %in% tidy_title$word
#which words overlap?
overlap <- intersect(tidy_abstract$word,tidy_title$word)
ama_overlap <- data.frame(overlap)
ama_overlap %>%
count(overlap, sort = T) %>%
filter(n > 1) %>%
mutate(overlap = reorder(overlap, n)) %>%
ggplot(aes(overlap, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
left_join(tidy_abstract,tidy_title)
library(dplyr)
library(tidytext)
#let's join our two dataframes first
tidy_ama <- full_join(tidy_abstract,tidy_title, by = 'word')
library(dplyr)
library(tidytext)
#let's join our two dataframes first
tidy_ama <- full_join(tidy_abstract,tidy_title, by = 'word')
count(tidy_abstract,word,sort = T)
library(dplyr)
library(tidytext)
#let's look at tidy_title first
title_count <- tidy_title%>%
count(word,sort=T)
library(dplyr)
library(tidytext)
#let's look at tidy_title first
ama_words <- tidy_abstract%>%
count(field, word, sort = T)
library(dplyr)
library(tidytext)
#let's look at tidy_title first
ama_words <- tidy_abstract%>%
count(Abstract, word, sort = T)
View(ama_words)
View(tidy_title)
library(dplyr)
library(tidytext)
#let's look at tidy_title first
ama_words <- tidy_abstract%>%
count(Abstract, word, sort = T)%>%
tidy_title%>%
count(Title, word, sort = T)
library(dplyr)
library(tidytext)
#let's look at tidy_title first
ama_words <- tidy_abstract%>%
count(Abstract, word, sort = T)
total_words <- ama_words%>%
group_by(Abstract)%>%
summarise(total = sum(n))
ama_words <- left_join(ama_words,total_words)
ama_words
View(ama_words)
library(ggplot2)
ggplot(ama_words, aes(n/total), fill = abstract) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~abstract, ncol = 2, scales = "free_y"
library(ggplot2)
ggplot(ama_words, aes(n/total), fill = abstract)) +
library(ggplot2)
ggplot(ama_words, aes(n/total, fill = abstract)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~abstract, ncol = 2, scales = "free_y"
library(ggplot2)
ggplot(ama_words, aes(n/total, fill = abstract)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~abstract, ncol = 2, scales = "free_y")
library(ggplot2)
ggplot(ama_words, aes(n/total, fill = Abstract)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~Abstract, ncol = 2, scales = "free_y")
View(ama_words)
library(dplyr)
library(tidytext)
ama_bigrams <- ama_clean %>%
unnest_tokens(bigram, Abstract, token = "ngrams", n = 2)
ama_bigrams
View(ama_clean)
View(ama_bigrams)
View(ama_bigrams)
library(dplyr)
library(tidytext)
ama_bigrams <- ama_clean %>%
unnest_tokens(bigram, Abstract, token = "ngrams", n = 2)
head(ama_bigrams)
View(ama_bigrams)
library(dplyr)
library(tidytext)
ama_bigrams <- ama_clean %>%
unnest_tokens(bigram, Abstract, token = "ngrams", n = 2)
colnames(ama_bigrams, c("abstract","bigram"))
library(dplyr)
library(tidytext)
ama_bigrams <- ama_clean %>%
unnest_tokens(bigram, Abstract, token = "ngrams", n = 2)
head(ama_bigrams)
#lets count the bigrams and filter them as well
ama_bigrams %>%
count(bigram,sort = T)
library(tidyr)
bigrams_separated <- ama_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts:
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigram_counts
library(igraph)
library(ggraph)
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
View(bigram_counts)
library(igraph)
library(ggraph)
bigram_graph <- bigram_counts %>%
filter(n > 1000) %>%
graph_from_data_frame()
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
