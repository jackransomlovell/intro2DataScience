Duncan$type; as.numeric(Duncan$type) 	# shows us the coding of prof, wc, and bc
search()
prestige				# returns an error
attach(Duncan)	# you can attach data.frames (and lists) to the search path as well. In GENERAL, I recommend against doing this, but it does save us from having to do lots of typing "Duncan$" throughout the rest of this script, so just this once... This is an example of "do as you're told, not as I do" :O
search()
prestige				# doesn't return an error. Make sure you understand why!
#5 HISTOGRAMS OF THE DATA	---------------------
hist(prestige)
hist(type)	# "hist" function only wants objects of mode numeric; such errors HELP the user, making sure we know what we're doing. If you're unclear, see what the mode of type is!
hist(as.numeric(type))	# notice how it's easy to change the mode of an object ("type" here) on the fly. But please remember that to change from something that looks numeric but that's actually a factor in R, you have to do it differently:
(fac <- as.factor(c(3,3,3,2,2,'a','a','b',1,1,'c',4,4)))
#THIS is how to change a factor to a numeric (if the factor labels have a numeric meaning)
(num.fac <- as.numeric(as.character(fac)))
mode(num.fac)
summary(num.fac)
#this is how NOT to do it:
(num.fac.bad <- as.numeric((fac)))#this is how to change it
mode(num.fac.bad)
summary(num.fac.bad) #mean is 3.54 instead of 2.56 - 2.56 is probably the right way to think about these values
# "par" is a lot like the function "options" except it changes the defaults for graphics only. It is a A VERY USEFUL FUNCTION to have in your bag of goodies (or book of spells for you Harry Potter fans)
op <- par(mfrow=c(2,2))	 # mfrow is a handy option - it says to split the screen up into (here) 2 rows and 2 columns. When you assign "par" to something, it returns the *original* values of "par" - making it easy to change the graphing options back to its defaults, just like we did with options() above
op			 # see - "op" is just the value that "mfrow" was *before* we changed it
hist(as.numeric(type))
hist(income,col='blue')
hist(education,col='red')
hist(prestige,col='green',main="This be my HISTO")
par()$mfrow
?mfrow
??mfrow
par()$mfrow
par(op)			# now we change the mfrow back to being a 1x1 (a single graph)
par()$mfrow
#6 BASIC SCATTERPLOTS OF THE DATA		---------------------
plot(Duncan)		# we've already seen the default "plot" behavior for class(x)=data.frame; now let's look in more detail
plot(prestige~income)	# this is the default behavior for when "plot" gets a formula (y~x is formula notation in R)
formula.p.i <- prestige~income
info(formula.p.i)
plot(formula.p.i)	# same thing; so we see a very strong relationship between income and prestige
abline(lm(formula.p.i))	# when "abline" or "a to b line" gets an object of class "lm" (linear model), it returns a best fit line. Note that the best fit line was ADDED to the existing plot - many plotting functions in R add to an existing plot rather than create a new one. VERY useful for building cool plots. And again, it's important to be aware of the class of the object being passed to R functions
plot(formula.p.i,main="Prestige regressed on income",pch=19,col='blue')
abline(lm(formula.p.i),col='red',lty=2,lwd=3)    # changing the defaults to "abline"
?plot
#7 ADVANCED SCATTERPLOTS OF THE DATA	---------------------
# Here is the regular old default plot using the pairs() function
pairs(Duncan)
?panel
>pairs
?pairs
?par
?abline
?lines
# Let's see how we can modify the above to make a cooler graph. The rationale of the following syntax is not at all easy to see - don't worry too much right now about understanding this. It requires understanding the syntax for the "function" class - something we'll get to later in the course, but if you want to try, start with ?pairs and look at "panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
)
?lowess
#And we can add new plots to the diagonals too using "diag.panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
diag.panel = function(x){			   # diag.panel option also requires input of class "function"
par(new=TRUE)			 # par(new=TRUE) disallows hist to clear the old graphs before drawing a new histogram
hist(x,main="",axes=FALSE)}	 # creates histograms along the diagonal
)
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
?hist
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a histogram")
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
Duncan
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
fomrula.t.i <- income~type
plot(formula.t.i)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
formula.t.i <- income~type
plot(formula.t.i)
plot(prestige~income)	# this is the default behavior for when "plot" gets a formula (y~x is formula notation in R)
#Check that it works
MyPairs(Duncan)
plot(prestige~income)	# this is the default behavior for when "plot" gets a formula (y~x is formula notation in R)
plot(income~type)
plot(type~income)
#Check that it works
MyPairs(Duncan)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
formula.t.i <- income~type
plot(formula.t.i)
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
plot(type~income)
plot(income~type)
class(formula.t.i)
class(Duncan$type)
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a Histogram")
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
formula.t.i <- as.numeric(as.character(income~type))
plot(formula.t.i)
formula.t.i
income~type
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
formula.t.i <- income~as.numeric(as.character(type))
plot(formula.t.i)
formula.t.i
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(as.character(type))
formula.t.i <- income~type_numeric
plot(formula.t.i)
plot(income~type_numeric)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(as.character(Duncan$type))
formula.t.i <- income~type_numeric
plot(formula.t.i)
Duncan
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(as.character(Duncan$type))
formula.t.i <- lm(income~type_numeric)
?lm
plot(type_numeric, income)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(as.character(Duncan$type))
plot(type_numeric, income)
u
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
plot(type_numeric, income)
type_numeric
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income)
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
lines(lowess(formula.t.i),col="darkgreen",lwd=2)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
lines(lowess(formula.t.i),col="darkgreen",lwd=2)
?lowess
# (e) Run the following code:
my.x <- rnorm(1e4)			      # 1e4 = 10,000 random normal numbers
my.y <- sqrt(.3)*my.x + sqrt(.7)*rnorm(1e4)   # my.y is 60% x (r2 = .6) and 40% random noise
Huge.data <- data.frame(y=my.y,x=my.x)
# It is difficult to 'look' at large amounts of data. Run the following:
Huge.data 		# not helpful!!
plot(Huge.data)
class(Huge.data)
?sample
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(sample(Huge.data,300))
sample(Huge.data)
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(sample(Huge.data,size = 300))
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(Huge.data, size = 300)])
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(nrows(Huge.data), size = 300)])
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(nrow(Huge.data), size = 300)])
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(nrow(Huge.data), size = 300),])
mfrow
?par
#6 BASIC SCATTERPLOTS OF THE DATA		---------------------
plot(Duncan)		# we've already seen the default "plot" behavior for class(x)=data.frame; now let's look in more detail
plot(prestige~income)	# this is the default behavior for when "plot" gets a formula (y~x is formula notation in R)
formula.p.i <- prestige~income
info(formula.p.i)
plot(formula.p.i)	# same thing; so we see a very strong relationship between income and prestige
abline(lm(formula.p.i))	# when "abline" or "a to b line" gets an object of class "lm" (linear model), it returns a best fit line. Note that the best fit line was ADDED to the existing plot - many plotting functions in R add to an existing plot rather than create a new one. VERY useful for building cool plots. And again, it's important to be aware of the class of the object being passed to R functions
plot(formula.p.i,main="Prestige regressed on income",pch=19,col='blue')
abline(lm(formula.p.i),col='red',lty=2,lwd=3)    # changing the defaults to "abline"
#7 ADVANCED SCATTERPLOTS OF THE DATA	---------------------
# Here is the regular old default plot using the pairs() function
pairs(Duncan)
# Let's see how we can modify the above to make a cooler graph. The rationale of the following syntax is not at all easy to see - don't worry too much right now about understanding this. It requires understanding the syntax for the "function" class - something we'll get to later in the course, but if you want to try, start with ?pairs and look at "panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
)
pairs(Huge.data)
# "par" is a lot like the function "options" except it changes the defaults for graphics only. It is a A VERY USEFUL FUNCTION to have in your bag of goodies (or book of spells for you Harry Potter fans)
op <- par(mfrow=c(2,2))	 # mfrow is a handy option - it says to split the screen up into (here) 2 rows and 2 columns. When you assign "par" to something, it returns the *original* values of "par" - making it easy to change the graphing options back to its defaults, just like we did with options() above
op			 # see - "op" is just the value that "mfrow" was *before* we changed it
hist(as.numeric(type))
hist(income,col='blue')
hist(education,col='red')
hist(prestige,col='green',main="This be my HISTO")
par()$mfrow
par(op)			# now we change the mfrow back to being a 1x1 (a single graph)
par()$mfrow
#6 BASIC SCATTERPLOTS OF THE DATA		---------------------
plot(Duncan)		# we've already seen the default "plot" behavior for class(x)=data.frame; now let's look in more detail
plot(prestige~income)	# this is the default behavior for when "plot" gets a formula (y~x is formula notation in R)
formula.p.i <- prestige~income
info(formula.p.i)
plot(formula.p.i)	# same thing; so we see a very strong relationship between income and prestige
abline(lm(formula.p.i))	# when "abline" or "a to b line" gets an object of class "lm" (linear model), it returns a best fit line. Note that the best fit line was ADDED to the existing plot - many plotting functions in R add to an existing plot rather than create a new one. VERY useful for building cool plots. And again, it's important to be aware of the class of the object being passed to R functions
plot(formula.p.i,main="Prestige regressed on income",pch=19,col='blue')
abline(lm(formula.p.i),col='red',lty=2,lwd=3)    # changing the defaults to "abline"
#7 ADVANCED SCATTERPLOTS OF THE DATA	---------------------
# Here is the regular old default plot using the pairs() function
pairs(Duncan)
# Let's see how we can modify the above to make a cooler graph. The rationale of the following syntax is not at all easy to see - don't worry too much right now about understanding this. It requires understanding the syntax for the "function" class - something we'll get to later in the course, but if you want to try, start with ?pairs and look at "panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
)
#And we can add new plots to the diagonals too using "diag.panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
diag.panel = function(x){			   # diag.panel option also requires input of class "function"
par(new=TRUE)			 # par(new=TRUE) disallows hist to clear the old graphs before drawing a new histogram
hist(x,main="",axes=FALSE)}	 # creates histograms along the diagonal
)
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a Histogram")
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
lines(lowess(formula.t.i),col="darkgreen",lwd=2)
# (c) What is your verbal interpretation for the loess (green) curve for income~type in the plot you did in HW1b (or in row 2 column 1 from the pairs() graph in #7 immediately above if you couldn't do HW1b)? Assign your answer (the character string) to an object "hw1c". You can read information on this dataset using ?Duncan
hw1c <- "After smoothing our line of best fit it is clear that each distinct category has seperate levels of income. Although, it is also clear that income may not necessarily operate as a linear function of (or is linearly predicted by) type of employment. Rather the smoothed line suggests our data may be behaving in a more quadratic manor."
# (d) How do you interpret the linear line (red) for type~income? Assign your answer to hw1d."
hw1d <- "The linear positive trend suggests that as the factors of employment increase, income might as well"
# (e) Run the following code:
my.x <- rnorm(1e4)			      # 1e4 = 10,000 random normal numbers
my.y <- sqrt(.3)*my.x + sqrt(.7)*rnorm(1e4)   # my.y is 60% x (r2 = .6) and 40% random noise
Huge.data <- data.frame(y=my.y,x=my.x)
# It is difficult to 'look' at large amounts of data. Run the following:
Huge.data 		# not helpful!!
plot(Huge.data)
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(nrow(Huge.data), size = 300),])
#8 LINEAR REGRESSION	---------------------
# the function "lm" takes in an object of class "formula"
duncan.model.1 <- lm(prestige~income+education)
# (f) Now take four random samples of the data, each of size=300. Plot each in one of the panes of a 2x2 plot. Title each one "HW1f plot X" where X is 1, 2, 3, or 4 (in order). Remember the par(mfrow=) option to change R's default plotting behavior!
par(mfrow=c(2,2))
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 1")
# (f) Now take four random samples of the data, each of size=300. Plot each in one of the panes of a 2x2 plot. Title each one "HW1f plot X" where X is 1, 2, 3, or 4 (in order). Remember the par(mfrow=) option to change R's default plotting behavior!
par(mfrow=c(2,2))
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 1")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 2")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 3")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 4")
#8 LINEAR REGRESSION	---------------------
# the function "lm" takes in an object of class "formula"
duncan.model.1 <- lm(prestige~income+education)
# notice that your assign the output to be an object (duncan.model.1 in this case)
duncan.model.1
# class is "lm" - automatically assigned by the function "lm"
info(duncan.model.1)
# summary deals with class "lm" as below; both predictors are highly significant: for every $1K gain in income, prestige tends to increase by .5987
summary(duncan.model.1)
# check out all the goodies we have access to...
names(duncan.model.1)
#can you figure out how to look at the residuals of the model?
duncan.model.1$residuals			# OK - I'll tell you. This works because mode(duncan.model.1) = list
# what's the most negative residual?
(d.min <- min(duncan.model.1$residuals))
# can you understand this syntax? Shows which profession has the least prestige given its income & educational level.
Duncan[duncan.model.1$residuals==d.min,]
# here are some default methods of graphing the linear model; let's get more specific...
plot(duncan.model.1) #hit your RETURN key IN THE CONSOLE to forward through the various plots
#9 REGRESSION DIAGNOSTICS - ASSESSING NORMALITY	---------------------
# qq.plot is a function from "car" package; are the resids normal?
qqPlot(duncan.model.1$residuals)
#Point 6 appears to be a bit of an outlier. What is it?
Duncan[6,] #makes sense - much more prestige than expected based on income
# The default of qqPlot is to plot the studentized residuals of an object of class lm (which use the leverage to account for fact that resids at extreme of x have larger variance)
qqPlot(duncan.model.1)
#Note that point 6 appears to be a bit of an outlier when using regular residuals, but not after we account for the fact that it has higher uncertainty. The difference between this plot is that we let R use the default qqPlot behavior for class lm (studentized residuals) whereas the first time we used qqPlot, we explicitly provided it an object of class numeric and it changed its behavior accordingly
info(duncan.model.1$residuals)
#10 REGRESSION DIAGNOSTICS II - ASSESSING INFLUENCE VIA COOK'S D	---------------------
# function "coookd" returns the Cook's D measure of influence on the regression slope
duncan.cooks <- cooks.distance(duncan.model.1)
duncan.cooks
# if you give a single vector to plot, it plots the vector as y and index (its order) as x - type='n' means "don't plot" - i.e., make an empty plot that we'll add to
plot(duncan.cooks,xlab="Row Number",type='n')
# add the row numbers of cook's D to the plot
text(duncan.cooks,labels=as.character(1:length(duncan.cooks)))
# our n = 45 and # parameters = 3
n <- 45; p <- 3
# rule of thumb for Cook's D > 4/(n-p) is high; the option "h" makes a horizontal line
abline(h=4/(n-p))
# here we add the Cook's D values onto the Duncan data.frame
Duncan$cooks <- round(duncan.cooks,3)
# looking at rows via indexing; make sure you understand this syntax
Duncan[duncan.cooks > 4/(n-p),]
#11 REGRESSION DIAGNOSTICS III - ASSESSING LINEARITY & INFLUENCE	---------------------
# Let's construct some partial regression plots - these are nice for visualizing the (partial) slope you get in multiple regression, but are also helpful for detecting non-linearity & influential points. If there is nonlinearity, the data may move in a pattern about the linear line. If there is an influential point, it should stick out, away from the other points.
avPlots(duncan.model.1)
# Let's create a vector to be used later; all 1's except for when cooks D is large (=17)
duncan.points <- rep(1,nrow(Duncan))
duncan.points[duncan.cooks > 4/(45-3)] <- 17  #can you figure out this syntax? Give it a try!
duncan.points
# Let's create a vector to be used later; all 1's except for when cooks D is large (=17)
duncan.points <- rep(1,nrow(Duncan))
duncan.points
duncan.points[duncan.cooks > 4/(45-3)] <- 17  #can you figure out this syntax? Give it a try!
duncan.points
# see ?points to figure out how to see what "17" means for points... its a triangle
?points
# partial regression plot showing big Cook's D's as triangles
avPlots(duncan.model.1,pch=duncan.points)
#We can also JUST plot the partial plot of prestige on income holding education constant:
?avPlots
avPlots(duncan.model.1,terms = ~income, pch=duncan.points)
#let's do the same thing as above, but do it ourselves to see exactly what's happening
#Make two windows
op <- par(mfrow=c(1,2))
# as above in the lefthand plot
avPlots(duncan.model.1,terms = ~income,pch=duncan.points)
# Now making our own partial regression plot to put in the righthand plot
income.ed <- lm(income~education)$residuals
prestige.ed <- lm(prestige~education)$residuals
plot(income.ed,prestige.ed,pch=duncan.points,main="Our partial plot")
abline(lm(prestige.ed ~ income.ed))
par(op)
#12 REGRESSION DIAGNOSTICS IV - HOMOGENEITY OF VARIANCE	---------------------
# lets plot residuals against y-hat. This will help us see constant variance and whether non-linearity exists. Here's a reminder of what we have access to
names(duncan.model.1)
setwd('~/Desktop/stat2600')
?search_tweets
??search_tweets
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library(ggplot2)
install.packages(ggplot2)
"ggplot2"
require(ggplot2)
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library(ggplot2)
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library("ggplot2")
install.packages("ggplot2")
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library("ggplot2")
library(dplyr)
# text mining library
library(tidytext)
# plotting packages
library(igraph)
install.packages("igraph")
install.packages(ggraph)
install.packages("ggraph")
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library("ggplot2")
library(dplyr)
# text mining library
library(tidytext)
# plotting packages
library(igraph)
library(ggraph)
#Use our own token
twitter_token <- create_token(
app = 'meta_nlp',
consumer_key="pzOo1DHoCGpIjElgpHzVDHgl4",
consumer_secret="QpTDNngQEDv9CkroVTjBlpRQcoL4iJvGkrAqPNAmXrIFdEVSNE",
access_token="1301874142359293952-K7O1mzxSh7PEPR799S9Db3cfHzLx97",
access_secret="mOvMMSEmBGZwT9sqZzuX8Oe1K2PRFwohGEOA6KEkxXZ1w"
)
#search twitter
science_tweets <- search_tweets(q="computational neuroscience", n = 18000, lang="en", include_rts = F)
science_tweets
#Import rtweet and other libs
library(rtweet)
library(dplyr)
# plotting and pipes - tidyverse!
library("ggplot2")
library(dplyr)
# text mining library
library(tidytext)
# plotting packages
library(igraph)
library(ggraph)
#Use our own token
twitter_token <- create_token(
app = 'meta_nlp',
consumer_key="pzOo1DHoCGpIjElgpHzVDHgl4",
consumer_secret="QpTDNngQEDv9CkroVTjBlpRQcoL4iJvGkrAqPNAmXrIFdEVSNE",
access_token="1301874142359293952-K7O1mzxSh7PEPR799S9Db3cfHzLx97",
access_secret="mOvMMSEmBGZwT9sqZzuX8Oe1K2PRFwohGEOA6KEkxXZ1w"
)
#search twitter
science_tweets <- search_tweets(q="computational+neuroscience", n = 18000, lang="en", include_rts = F)
science_tweets <- search_tweets(q="computational+neuroscience", n = 18000, lang="en", include_rts = F)
science_tweets
science_tweets$text
View(science_tweets)
science_tweets$text
#lets do this manually & without the tidyverse package
science_tweets$stripped_text <- gsub("http.*","",  science_tweets$text)
science_tweets$stripped_text <- gsub("https.*","", science_tweets$stripped_text)
#lets do this manually & without the tidyverse package
science_tweets$stripped_text <- gsub("http.*","",  science_tweets$text)
science_tweets$stripped_text <- gsub("https.*","", science_tweets$stripped_text)
science_tweets$stripped_text
#lets do this manually & without the tidyverse package
science_tweets$stripped_text <- gsub("http.*","",  science_tweets$text)
science_tweets$stripped_text <- gsub("https.*","", science_tweets$stripped_text)
head(science_tweets$stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dlypr::select(stripped_text)%>%
unset_tokens(word, stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dlpyr::select(stripped_text)%>%
unset_tokens(word, stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dplyr::select(stripped_text)%>%
unset_tokens(word, stripped_text)
require(tidytext)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dplyr::select(stripped_text)%>%
unset_tokens(word, stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dplyr::select(stripped_text)%>%
tidytext::unset_tokens(word, stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dplyr::select(stripped_text)%>%
tidytext::unnset_tokens(word, stripped_text)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
dplyr::select(stripped_text)%>%
tidytext::unnest_tokens(word, stripped_text)
View(science_tweets_clean)
#lets store it in a new column!
science_tweets_clean <- science_tweets%>%
tidytext::unnest_tokens(word, stripped_text)
science_tweets_clean
word
select(science_tweets$stripped_text)
